/*
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. 
Note that a subsequence does not necessarily need to be contiguous.
A string is called palindrome if is one that reads the same backward as well as forward.
 */
package com.vikash.vikash.practice;
import com.vikash.vikash.practice.javaconcepts.abstractT.Animal;

import java.util.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class VikashPractice {

    public boolean circularArrayLoop(int[] nums) {
        for(int i=0;i<nums.length;i++)
        {
            float direction=Math.signum(nums[i]);
            int slow=i;
            int fast=i;
            do{
                slow=findNext(nums,direction,slow);
                fast=findNext(nums,direction,fast);
                if(fast!=-1)
                    fast=findNext(nums,direction,fast);
            }
            while(slow!=-1 && fast!=-1 && slow!=fast);
            if(slow!=-1 && slow==fast)
                return true;
        }
        return false;
    }
    private int findNext(int[] nums, float direction, int i)
    {
        float currDirection=Math.signum(nums[i]);
        if(direction*currDirection<0) return -1;
        int n=nums.length;
        int nextIndex=(i+nums[i])%n;
        if(nextIndex<0) nextIndex+=n;
        return nextIndex==i?-1:nextIndex;
    }

    public static void main(String[] args) {
        VikashPractice vikashPractice=new VikashPractice();
        vikashPractice.circularArrayLoop(new int[]{1,-1,5,1,4});

        Animal raj=new Animal(){
            @Override
            public void roar() {
                System.out.println("Anonymous is roaring");
            }
            @Override
            public void walk() {
                System.out.println("Anonymous is walking");
            }
            public void getRaj()
            {
                System.out.println("This is raj");
            }
        };

        raj.roar();
        raj.walk();

        List<Integer> ls=new ArrayList<>();
        ls.add(1);
        ls.add(2);
        ls.add(0, 5);

        ls.forEach(System.out::println);

    }

}
